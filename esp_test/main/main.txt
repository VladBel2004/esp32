#include "esp_wifi.h"
#include "esp_log.h"
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nvs_flash.h"

void check_err( char * part, int32_t esp_err );

static const char *TAG = "SomeTag";
esp_log_level_t log_level = ESP_LOG_ERROR;

void app_main( void )
{
        wifi_init_config_t cfg = 
        {
                .event_hander = &esp_event_send,
                .osi_funcs = &g_wifi_osi_funcs,
                .wpa_crypto_funcs = g_wifi_default_wpa_crypto_funcs,
                .static_rx_buf_num = CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM,
                .dynamic_rx_buf_num = CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM,
                .tx_buf_type = CONFIG_ESP32_WIFI_TX_BUFFER_TYPE,
                .static_tx_buf_num = WIFI_STATIC_TX_BUFFER_NUM,
                .dynamic_tx_buf_num = WIFI_DYNAMIC_TX_BUFFER_NUM,
                .csi_enable = WIFI_CSI_ENABLED,
                .ampdu_rx_enable = WIFI_AMPDU_RX_ENABLED,
                .ampdu_tx_enable = WIFI_AMPDU_TX_ENABLED,
                .nvs_enable = WIFI_NVS_ENABLED,
                .nano_enable = WIFI_NANO_FORMAT_ENABLED,
                .tx_ba_win = WIFI_DEFAULT_TX_BA_WIN,
                .rx_ba_win = WIFI_DEFAULT_RX_BA_WIN,
                .wifi_task_core_id = WIFI_TASK_CORE_ID,
                .beacon_max_len = WIFI_SOFTAP_BEACON_MAX_LEN,
                .magic = WIFI_INIT_CONFIG_MAGIC
        };
       wifi_mode_t wifi_mode = WIFI_MODE_AP;
       esp_err_t esp_err;
       wifi_config_t wifi_ap_cfg = 
       {
               .ap = 
               {
                       .ssid = "esp_station",
                       .password = "12345678",
                       .channel = 6,
                       .authmode = WIFI_AUTH_WPA2_PSK,
                       .ssid_len = 11,
               },
       };

       nvs_flash_init();
       tcpip_adapter_init();

       esp_err = esp_wifi_init( &cfg );
       check_err( "Init Wifi", esp_err );

       esp_err = esp_wifi_set_mode( wifi_mode );
       check_err( "Set Mode", esp_err );

       esp_err = esp_wifi_set_config( WIFI_IF_AP, &wifi_ap_cfg );
       check_err( "Set Config", esp_err );
       
       esp_err = esp_wifi_start();
       check_err( "Wifi Start", esp_err );

}

void check_err( char * part, int32_t esp_err )
{
        if( esp_err != ESP_OK )
        {
                esp_log_write( log_level, TAG, part );

                if( esp_err == ESP_ERR_NO_MEM )
                {
                        esp_log_write( log_level, TAG, "\tError in memory." );
                }
                else if( esp_err == ESP_ERR_WIFI_NOT_INIT )
                {
                        esp_log_write( log_level, TAG, "\tWifi not init." );
                }
                else if( esp_err == ESP_ERR_INVALID_ARG )
                {
                        esp_log_write( log_level, TAG, "\tInvalid arg." );
                }
                else if( esp_err == ESP_ERR_WIFI_CONN )
                {
                        esp_log_write( log_level, TAG, "\tInside Wifi error." );
                }
                else
                {
                        esp_log_write( log_level, TAG, "\tI don't know." );
                }
        }
}
